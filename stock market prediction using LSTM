# 1. Import required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import matplotlib.dates as mdates
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# 2. Download stock data
ticker = 'AAPL'
df = yf.download(ticker, start='2015-01-01', end='2024-01-01')
data = df[['Close']]

# 3. Normalize the data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# 4. Create sequence dataset
def create_dataset(data, window=60):
    X, y = [], []
    for i in range(window, len(data)):
        X.append(data[i-window:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

window_size = 60  # LSTM typically uses larger window
X, y = create_dataset(scaled_data, window_size)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # [samples, time steps, features]

# 5. Train-test split
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# 6. Define LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(window_size, 1)))
model.add(Dropout(0.2))
model.add(LSTM(50))
model.add(Dropout(0.2))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()

# 7. Train the model
model.fit(X_train, y_train, epochs=20, batch_size=32, verbose=1)

# 8. Predict full data
X_full, y_full = create_dataset(scaled_data, window_size)
X_full = np.reshape(X_full, (X_full.shape[0], X_full.shape[1], 1))
predicted_full = model.predict(X_full)

# 9. Inverse transform predictions
predicted_prices_full = scaler.inverse_transform(predicted_full.reshape(-1, 1))
actual_prices_full = scaler.inverse_transform(y_full.reshape(-1, 1))

# 10. Get dates aligned with predictions
full_dates = data.index[window_size:]

# 11. Plot
plt.figure(figsize=(12, 6))
plt.plot(full_dates, actual_prices_full, label='Actual Price')
plt.plot(full_dates, predicted_prices_full, label='Predicted Price')
plt.title(f'{ticker} Stock Price Prediction (2015â€“2024) - LSTM')
plt.xlabel('Year')
plt.ylabel('Price (USD)')

plt.gca().xaxis.set_major_locator(mdates.YearLocator())
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
